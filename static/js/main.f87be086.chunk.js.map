{"version":3,"sources":["fonts/montserrat/Montserrat-Regular.ttf","fonts/libre_caslon/librecaslondisplay-regular-webfont.woff","assets/DSC05102.JPG","Components/percentBar.tsx","skillSection.tsx","layout.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","PercentBarDiv","styled","div","props","color","darken","PercentBar","useState","percentage","setPercentage","elementVisible","setElementVisible","currentPercentage","useRef","useEffect","current","interval","setInterval","oldPercent","percent","clearInterval","className","active","label","onChange","isVisible","style","width","SkillsData","desc","SkillSectionRow","Row","SkillsList","Col","SkillSection","selected","setSelected","sm","map","skill","idx","key","marginTop","onClick","Section","section","Tint","Container","HeroSection","display","alignItems","children","App","justifyContent","backgroundImage","require","backgroundSize","backgroundPosition","backgroundColor","padding","flexFlow","fontWeight","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f87be086.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Montserrat-Regular.ee653992.ttf\";","module.exports = __webpack_public_path__ + \"static/media/librecaslondisplay-regular-webfont.697e987d.woff\";","module.exports = __webpack_public_path__ + \"static/media/DSC05102.a0dcf16e.JPG\";","import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport {darken, lighten} from 'polished';\r\n\r\nimport VisibilitySensor from 'react-visibility-sensor';\r\n\r\ninterface PercentBarProps {\r\n    label: string;\r\n    percent: number;\r\n    color: string;\r\n    onClick: any;\r\n    active: boolean;\r\n}\r\n\r\nconst PercentBarDiv = styled.div<PercentBarProps>`\r\n    display: flex;\r\n    cursor: pointer;\r\n\r\n    .label {\r\n        width: 120px;\r\n        font-weight: bold;\r\n    }\r\n\r\n    .bar {\r\n        display: flex;\r\n        flex: 1 0 auto;\r\n    }\r\n\r\n    .filled {\r\n        background-color: ${props => props.color};\r\n        margin-right: 6px;\r\n        border: 3px solid transparent;\r\n\r\n        &:hover {\r\n            box-shadow: 3px 3px 4px 0px ${props => darken(0.1, props.color)};\r\n        }\r\n    }\r\n\r\n    .empty {\r\n        text-align: right;\r\n        flex: 1 1 auto;\r\n    }\r\n\r\n    &.active .filled {\r\n        box-shadow: 3px 3px 4px 0px ${props => darken(0.1, props.color)};\r\n\r\n    }\r\n`;\r\n\r\nfunction PercentBar (props: PercentBarProps) {\r\n\r\n    const [percentage, setPercentage] = useState(0),\r\n          [elementVisible, setElementVisible] = useState<boolean>(false),\r\n          currentPercentage = useRef(percentage);\r\n\r\n    function onVisible(isVisible: boolean) {\r\n        if (isVisible && !elementVisible) {\r\n            setElementVisible(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(elementVisible && currentPercentage.current === 0) {\r\n            const interval = setInterval(() => {\r\n                setPercentage(oldPercent => {\r\n                    if (oldPercent >= props.percent) {\r\n                        clearInterval(interval);\r\n                        return oldPercent\r\n                    } else {\r\n                        return oldPercent + 1\r\n                    }\r\n                });\r\n            }, 10);\r\n        }\r\n    }, [elementVisible, currentPercentage, props.percent]);\r\n\r\n    return <PercentBarDiv className={props.active ? 'active' : ''} {...props}>\r\n        <div className='label'>\r\n            {props.label}\r\n        </div>\r\n        <VisibilitySensor onChange={onVisible}>\r\n            <div className='bar'>\r\n                <div className='filled' style={{width: `${percentage}%`}}/>\r\n                <div className='empty'>\r\n                    {percentage}%\r\n                </div>\r\n            </div>\r\n        </VisibilitySensor>\r\n    </PercentBarDiv>\r\n}\r\n\r\nexport default PercentBar;","import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n    Row,\r\n    Col\r\n  } from \"reactstrap\";\r\n  import PercentBar from './Components/percentBar';\r\n\r\n  const SkillsData = [\r\n      {\r\n          label: 'JAVASCRIPT',\r\n          desc: `Javascript is my native tounge. I am working with it every day to achieve all kinds of weird and wonderful things. I am fluent in modern JS features such as async/await, frameworks like React, build tools such as Webpack and the JS superset Typescript.`,\r\n          percentage: 90,\r\n          color: '#ffa5006e'\r\n      },\r\n      {\r\n        label: 'HTML/CSS',\r\n        desc: `The bread and butter of web development. I am fluent in CSS preprocessors such as LESS and SASS, and frequenty use the tools such as flexbox and CSS Grid to pull off elegant layouts.`,\r\n        percentage: 80,\r\n        color: '#ff00007d'\r\n    },\r\n    {\r\n        label: 'PYTHON',\r\n        desc: `Let's face it, Python is the best. It's elegant, powerful and easy to write. I have been working with Python for years building custom business logic for Odoo systems.`,\r\n        percentage: 70,\r\n        color: '#00008b78'\r\n    },\r\n    {\r\n        label: 'REACT',\r\n        desc: `React has changed the fronted-dev landscape massivly in the last few years. Recently I have been migrating a large application for a not-for-profit organisation from a monolithic KnockoutJS application into a beautifully clean and modern React app.`,\r\n        percentage: 70,\r\n        color: '#00858b78'\r\n    },\r\n    {\r\n        label: 'SQL',\r\n        desc: `When working with large sets of data, nothing beats cutting straight to the source and crafting an elegant SQL statement to fetch the data in a flash.`,\r\n        percentage: 50,\r\n        color: '#008b1178'\r\n    },\r\n    {\r\n        label: 'C#',\r\n        desc: `Whilst not my strongest language, I have experience on .NET projects that have exposed me to the values and advantages of stongly typed languages, which motivated me to learn Typescript to help my Javascript scale.`,\r\n        percentage: 40,\r\n        color: '#6f008b78'\r\n    },\r\n    {\r\n        label: 'ANGULAR',\r\n        desc: `One of the other big players in the JS framework game, I have experience working with several Angular projects, both for work and through university.`,\r\n        percentage: 30,\r\n        color: '#c88787'\r\n    }\r\n\r\n  ]\r\n\r\nconst SkillSectionRow = styled(Row)`\r\n    height: 350px;\r\n`;\r\n\r\nconst SkillsList = styled(Col)`\r\n    display: flex;\r\n    flex-flow: column;\r\n    justify-content: space-evenly;\r\n`;\r\n\r\nfunction SkillSection() {\r\n    const [selected, setSelected] = useState<number>(0);\r\n\r\n\r\n    return <>\r\n    <SkillSectionRow>\r\n        <Col sm=\"6\">\r\n            {SkillsData.map((skill, idx) => {\r\n                return <div key={idx}>\r\n                    {selected === idx && <>\r\n                        <h4 style={{marginTop: 0}}>{skill.label}</h4>\r\n                        <p>{skill.desc}</p>\r\n                    </>}\r\n                </div>\r\n            })}\r\n        </Col>\r\n\r\n        <SkillsList sm=\"6\">\r\n            {SkillsData.map((skill, idx) => {\r\n                return <PercentBar \r\n                    key={idx}\r\n                    label={skill.label} \r\n                    percent={skill.percentage} \r\n                    color={skill.color} \r\n                    active={selected === idx}\r\n                    onClick={() => setSelected(idx)}\r\n                    />\r\n            })}\r\n        </SkillsList>\r\n    </SkillSectionRow>\r\n    </>\r\n}\r\n\r\nexport default SkillSection;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Section = styled.section`\r\n    height: 100vh;\r\n`;\r\n\r\nconst Tint = styled.div`\r\n    height: 100%;\r\n    width: 100%;\r\n    background-color: ${props => props.color};\r\n`;\r\n\r\nconst Container = styled.div`\r\n    max-width: 1200px;\r\n    margin: auto;\r\n    padding: 16px;\r\n    padding-top: 32px;\r\n`;\r\n\r\n// const SectionComponent = (props: any) => (\r\n//     <Section {...props}>\r\n//         <Tint>\r\n//             <Container>\r\n//                 {props.children}\r\n//             </Container>\r\n//         </Tint>\r\n//     </Section>\r\n//   );\r\n\r\nexport {\r\n    Section,\r\n    Container,\r\n    Tint\r\n}","import React from 'react';\r\nimport './App.css';\r\n\r\nimport SkillSection from './skillSection';\r\nimport { Section, Container, Tint } from './layout';\r\nimport ContactForm from './contactMe';\r\n\r\nfunction HeroSection(props: any) {\r\n  return <Section style={props.style}>\r\n    <Tint \r\n      style={{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        \r\n      }}\r\n      color=\"#15141452\">\r\n        {props.children}\r\n    </Tint>\r\n  </Section>\r\n}\r\n \r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n    <HeroSection style={{\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      color: 'white',\r\n      backgroundImage: 'url(' + require(\"./assets/DSC05102.JPG\") + ')',\r\n      backgroundSize: 'cover',\r\n      backgroundPosition: 'center'\r\n      \r\n    }}>\r\n      <div style={{\r\n          width: '100%',\r\n          backgroundColor: '#ffffff61',\r\n          padding: '32px',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          flexFlow: 'column nowrap',\r\n          }}>\r\n          <div>\r\n        \r\n          <h1 style={{fontWeight: 800, fontSize: '6rem'}}>\r\n            BENJAMIN BROMLEY\r\n          </h1>\r\n\r\n          <h2 className=\"subheading textRight\">\r\n            <i>Software Engineer</i>\r\n          </h2>\r\n        </div>\r\n      </div>\r\n    </HeroSection>\r\n\r\n    <Section style={{\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      flexFlow: 'column nowrap'\r\n    }}>\r\n      <Container>\r\n        <h2 className=\"textCenter\">MY SKILLS</h2>\r\n        <SkillSection/>\r\n      </Container>\r\n    </Section>\r\n\r\n    {/* <Section style={{\r\n      backgroundColor: '#8E8268'\r\n      // display: 'flex',\r\n      // justifyContent: 'center',\r\n      // alignItems: 'center',\r\n      // flexFlow: 'column nowrap'\r\n    }}>\r\n      <Container>\r\n        <h1 className=\"textCenter\" style={{color: 'white'}}>CONTACT ME</h1>\r\n        <ContactForm/>\r\n      </Container>\r\n    </Section> */}\r\n\r\n    <Container>\r\n      <h1 className=\"textCenter\">\r\n        TO BE CONTINUED...\r\n      </h1>\r\n    </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Fonts\r\nimport './fonts/montserrat/Montserrat-Regular.ttf';\r\nimport './fonts/libre_caslon/librecaslondisplay-regular-webfont.woff';\r\n\r\n// Theme Styles\r\nimport './lib/now-ui-kit/assets/css/bootstrap.min.css'\r\n// import \"./lib/now-ui-kit/assets/css/now-ui-kit.css\";\r\n// import \"assets/css/now-ui-kit.min.css\";\r\n// import \"assets/css/now-ui-kit.css.map\";\r\n// import \"./lib/now-ui-kit/assets/demo/demo.css\";\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}